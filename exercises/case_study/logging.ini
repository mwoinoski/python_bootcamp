[loggers]
keys=root,etl_demo

[handlers]
keys=console_handler,file_handler

[formatters]
keys=simple_formatter,file_formatter

[logger_root]
level=INFO
handlers=console_handler

# Note the configuration of the `etl_demo` logger below.
# The logging level is set to DEBUG, and the logger will write its output to
# the handlers named `console_handler` and `file_handler`
[logger_etl_demo]
level=DEBUG
handlers=console_handler,file_handler
qualname=etl_demo
propagate=0

# Note the configuration of the handler named `console_handler` below.
# It uses the formatter named `simple_formatter` and writes to stdout.
[handler_console_handler]
class=StreamHandler
level=WARNING
formatter=simple_formatter
args=(sys.stdout,)

# Note the configuration of the handler named `file_handler` below.
# It uses the formatter named `file_formatter` and writes to the file
# etl_demo.log.
[handler_file_handler]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=file_formatter
args=('etl_demo.log', 'a', 10000000, 5)
# RotatingFileHandler automatically rolls over to new log file when the
# log file size reaches maxBytes. 
# First arg: log file name prefix
# Second arg: mode: 'a' - append, 'w' - overwrite at startup
# Third arg: maxBytes
# Fourth arg: backupCount. Handler appends backup number to log file name.

[formatter_simple_formatter]
format=%(levelname)s:%(message)s

[formatter_file_formatter]
format=%(asctime)s|%(name)s|%(levelname)s|%(message)s
# An empty datefmt value substitutes ISO8601 format date/times, which 
# include milliseconds
datefmt=
